#if (${PACKAGE_NAME} && ${PACKAGE_NAME} != "")package ${PACKAGE_NAME};#end
#parse("File Header.java")
import java.math.*;
import java.util.*;
import java.util.stream.*;
import java.io.*;
import java.lang.*;
import java.text.*;

public class ${NAME} {
    static BufferedReader br;
    static StringTokenizer st;
    static final PrintWriter out = new PrintWriter(System.out);
    static final String SYMBOLS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

    public static void main(String[] args) throws IOException {
        String fileName = "${NAME}".toLowerCase() + ".dat";
        String path = "../datadump/${FOLDER}/SampleData/" + fileName;
        br = new BufferedReader(new FileReader(path));
        int cases = rI();

        for (int c=1; c<=cases; c++) {
            new Solver();
        }
        br.close(); out.close();
    }
    
    static class Solver() {
        Solver() {
        
        }
    }

    static String rA() throws IOException { return br.lines().collect(Collectors.joining()); }
    static char rC() throws IOException { return rN().charAt(0); }
    static double rD() throws IOException { return Double.parseDouble(rN()); }
    static int rI() throws IOException { return Integer.parseInt(rN()); }
    static String rL() throws IOException { return br.readLine().trim(); }
    static Long rLo() throws IOException { return Long.parseLong(rN()); }
    static String rN() throws IOException {
        while (st == null || !st.hasMoreTokens()) st = new StringTokenizer(rL());
        return st.nextToken();
    }
    static char[][] r2D(int l, int w) throws IOException {
        char[][] out = new char[l][w];
        for (int i = 0; i < l; i++)
            for (int j = 0; j < w; j++)
                out[i][j] = rC();
        return out;
    }

    public static <T> void p(T args) { System.out.print(args); }
    public static <T> void pl(T args) { System.out.println(args); }
    public static void pl() { System.out.println(); }
    public static void p2D(char[][] in) { Stream.of(in).forEach(e -> pl(AtoS(e))); }

    public static Integer StoI(String in) { return Integer.parseInt(in); }
    public static <T> String toS(T in) { return in.toString(); }
    public static <T> String AtoS(T[] in) { return Arrays.toString(in); }

    public static class Pt implements Comparable<Pt> {
        public int x, y;
        Pt() { x=y=0; }
        Pt(int x, int y) { this.x=x; this.y=y; }
        public int compareTo(Pt p) {
            if (this.x == p.x) return this.y - p.y;
            else return 0;
        }
    }

    public static String frDeciTo(int base, int n) {
        StringBuilder out = new StringBuilder(n == 0 ? "0" : "");
        int mod;
        while (n!=0) {
            mod = n % base;
            out.append(SYMBOLS.charAt(mod));
            n /= base;
        }
        return out.reverse().toString();
    }

    public static long toDeciFr(int base, String n) {
        long out = 0;
        int position = n.length();
        for (char ch : n.toCharArray())  {
            int value = SYMBOLS.indexOf(ch);
            out += value * Math.pow(base,--position);
        }
        return out;
    }

}
